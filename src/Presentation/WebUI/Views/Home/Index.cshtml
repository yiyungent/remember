@using Domain.Entities
@using Framework.Models
@using Framework.Extensions
@using WebUI.HtmlHelpers
@using WebUI.Areas.Admin.Models.Common;
@{
	Layout = "~/Views/Shared/_LayoutMain.cshtml";

	ListViewModel<Article> articleVM = ViewBag.ArticleVM;
	IList<Article> articles = articleVM.List.OrderByDescending(m => m.LastUpdateTime).ToList();

	// TODO: Article.Description 需要做html清理，只保存纯文本
}
@section head {
	<style>
	</style>
}
@section body {
}
@helper PrettyTime(DateTime time)
{
	DateTime now = DateTime.Now;
	TimeSpan ts = now - time;
	if (ts.TotalDays > 5)
	{
		@Html.Raw(time.ToString("yyyy-MM-dd HH:mm:ss"))
	}
	else if (ts.TotalHours >= 24)
	{
		@Html.Raw((int)ts.TotalDays + "天前");
	}
	else if (ts.TotalMinutes >= 60)
	{
		@Html.Raw((int)ts.TotalHours + "小时前");
	}
	else if (ts.TotalSeconds >= 60)
	{
		@Html.Raw((int)ts.TotalMinutes + "分钟前");
	}
	else
	{
		@Html.Raw((int)ts.TotalSeconds + "秒前");
	}
}
@* TODO: 这里需要根据可见程度决定是否显示在首页，未做 *@
@helper OpenStatus(Article.OStatus oStatus)
{
	switch (oStatus)
	{
		case Article.OStatus.All:
			@Html.Raw("所有人可见");
			break;
		case Article.OStatus.Self:
			@Html.Raw("仅自己可见");
			break;
		default:
			@Html.Raw("所有人可见");
			break;
	}
}
@helper SubString(string str, int length)
{
	string temp = str.Length > length ? str.Substring(0, length) : str;
	@temp
}
@helper ImgSrc(string url)
{
	if (string.IsNullOrEmpty(url))
	{
		@("/assets/images/default-article-pic.svg")
	}
	else
	{
		@url
	}
}

<!-- Main content -->
<section class="content">
	<div class="row">
		@foreach (var item in articles)
		{
			<div class="col-sm-6 col-md-3">
				<a href="@item.CustomUrl" class="thumbnail" target="_blank">
					<img src="@ImgSrc(item.PicUrl)" alt="@item.Title">
					<div class="caption">
						<h4>@SubString(item.Title, 7)</h4>
						<p>@SubString(item.Content, 15)</p>
					</div>
				</a>
			</div>
		}
	</div>
	<div class="row">
		<div class="col-xs-12">
			<!-- start 分页 -->
			<div id="js-page" pview="pages">
				<ul class="pagination pull-right" pview-btn-group pview-targets="table,pages">
					@Html.PageLinks(articleVM.PageInfo, i => Url.Action("Index", new { pageIndex = i, q = Request["q"], type = Request["type"] }))
				</ul>
			</div>
			<!-- end 分页 -->
		</div>
	</div>
</section>
<!-- /.content -->
